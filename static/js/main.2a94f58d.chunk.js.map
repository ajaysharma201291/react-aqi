{"version":3,"sources":["components/city.js","components/cities.js","App.js","reportWebVitals.js","index.js"],"names":["City","props","useState","data","setData","useEffect","selectedCityData","map","aqi","parseInt","toFixed","lineGraphData","labels","d","Date","updated","toLocaleString","datasets","label","borderColor","fill","onClick","clearCityData","className","selectedCity","style","fontSize","height","width","margin","Cities","getCategorisedData","impact","catagorized","Fragment","citiesAqi","cityAqi","index","showCityData","city","moment","fromNow","colSpan","App","componentDidMount","connect","connectInterval","ws","WebSocket","that","onopen","setState","timeout","clearTimeout","onmessage","evt","JSON","parse","handleDataChange","onclose","setTimeout","check","Math","min","onerror","err","console","error","message","close","state","readyState","CLOSED","historicalCitiesAqi","forEach","currentIndex","_","push","historicalCurrentIndex","length","pop","unshift","this","id","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAmCeA,EAhCF,SAACC,GAEV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAoBA,OAlBAC,qBAAU,WACNJ,EAAMK,iBAAiBC,KAAI,SAACJ,GACxBA,EAAKK,IAAMC,SAASN,EAAKK,IAAIE,QAAQ,GAAG,OAE5C,IAAMC,EAAgB,CAClBC,OAAQX,EAAMK,iBAAiBC,KAAI,SAAAM,GAAC,OAAI,IAAIC,KAAKD,EAAEE,SAASC,oBAC5DC,SAAU,CACN,CACId,KAAMF,EAAMK,iBAAiBC,KAAI,SAAAM,GAAC,OAAIA,EAAEL,OACxCU,MAAM,MACNC,YAAa,UACbC,MAAM,KAIlBhB,EAAQO,KACT,CAACV,IAEI,gCACJ,yBAAQoB,QAASpB,EAAMqB,cAAeC,UAAU,MAAhD,mCAA6EtB,EAAMuB,gBACnF,qBAAKC,MAAO,CAAEC,SAAU,OAAxB,iCACA,qBAAKD,MAAO,CAAEE,OAAQ,QAASC,MAAO,OAAQC,OAAQ,UAAtD,SACI,cAAC,IAAD,CAAM1B,KAAMA,UC+DT2B,EAxFA,SAAC7B,GAGZ,IAAM8B,EAAqB,SAAAvB,GACvB,IAAIe,EAAY,UACZS,EAAS,UAED,KAARxB,GACAwB,EAAS,4BACTT,EAAY,WACLf,GAAO,GAAKA,GAAO,IAC1BwB,EAAS,OACTT,EAAY,QACLf,EAAM,IAAMA,GAAO,KAC1BwB,EAAS,WACTT,EAAY,YACLf,EAAM,KAAOA,GAAO,KAC3BwB,EAAS,iCACTT,EAAY,uBACLf,EAAM,KAAOA,GAAO,KAC3BwB,EAAS,YACTT,EAAY,aACLf,EAAM,KAAOA,GAAO,KAC3BwB,EAAS,iBACTT,EAAY,kBACLf,EAAM,MACbwB,EAAS,YACTT,EAAY,aAGhB,IAAIU,EAAc,GAIlB,OAHAA,EAAW,OAAaD,EACxBC,EAAW,UAAgBV,EAEpBU,GAGX,OAAQ,eAAC,IAAMC,SAAP,WACJ,qBAAKT,MAAO,CAAEC,SAAU,OAAxB,6EACA,kCACI,gCACI,+BACI,oBAAIH,UAAU,OAAd,kBACA,oBAAIA,UAAU,sBAAd,kCACA,mDAGR,gCACKtB,EAAMkC,UAAU5B,KAAI,SAAC6B,EAASC,GAAV,OACjB,qBAAgBd,UAAWQ,EAAmBK,EAAQ5B,KAAKe,UAAWF,QAAS,kBAAMpB,EAAMqC,aAAaF,EAAQG,OAAhH,UACI,oBAAIhB,UAAU,OAAd,SAAsBa,EAAQG,OAC9B,qBAAIhB,UAAU,sBAAd,UAAqCa,EAAQ5B,IAAIE,QAAQ,GAAzD,KAAgEqB,EAAmBK,EAAQ5B,KAAKwB,OAAhG,OACA,6BAAKQ,IAAOJ,EAAQrB,SAAS0B,cAHxBJ,QAOjB,kCACI,6BACI,oBAAIK,QAAS,EAAGnB,UAAW,uBAA3B,sCAEJ,6BACI,oBAAImB,QAAS,EAAGnB,UAAW,uBAAyBQ,EAAmB,IAAIR,UAA3E,0CAEJ,6BACI,oBAAImB,QAAS,EAAGnB,UAAW,uBAAyBQ,EAAmB,KAAKR,UAA5E,iDAEJ,6BACI,oBAAImB,QAAS,EAAGnB,UAAW,uBAAyBQ,EAAmB,KAAKR,UAA5E,wEAEJ,6BACI,oBAAImB,QAAS,EAAGnB,UAAW,uBAAyBQ,EAAmB,KAAKR,UAA5E,mDAEJ,6BACI,oBAAImB,QAAS,EAAGnB,UAAW,uBAAyBQ,EAAmB,KAAKR,UAA5E,wDAEJ,6BACI,oBAAImB,QAAS,EAAGnB,UAAW,uBAAyBQ,EAAmB,KAAKR,UAA5E,gDAEJ,6BACI,oBAAImB,QAAS,EAAGnB,UAAW,uBAAyBQ,EAAmB,IAAIR,UAA3E,sDAIXtB,EAAMuB,aAAe,cAAC,EAAD,CAAMlB,iBAAkBL,EAAMK,iBAAkBgB,cAAerB,EAAMqB,cACvFE,aAAcvB,EAAMuB,eAAmB,SCgDpCmB,G,yDAjIb,WAAY1C,GAAQ,IAAD,8BACjB,cAAMA,IAWR2C,kBAAoB,WAClB,EAAKC,WAbY,EAoBnBA,QAAU,WACR,IAEIC,EAFAC,EAAK,IAAIC,UAAU,gCACnBC,EAAI,eAIRF,EAAGG,OAAS,WAEV,EAAKC,SAAS,CAAEJ,GAAIA,IACpBE,EAAKG,QAAU,IACfC,aAAaP,IAIfC,EAAGO,UAAY,SAACC,GAEd,IAAMpD,EAAOqD,KAAKC,MAAMF,EAAIpD,MAE5B,EAAKuD,iBAAiBvD,IAIxB4C,EAAGY,QAAU,SAACJ,GAEZN,EAAKG,QAAUH,EAAKG,QAAUH,EAAKG,QACnCN,EAAkBc,WAAW,EAAKC,MAAOC,KAAKC,IAAI,IAAOd,EAAKG,WAIhEL,EAAGiB,QAAU,SAACC,GACZC,QAAQC,MAAM,6BAA8BF,EAAIG,QAAS,kBACzDrB,EAAGsB,UAnDY,EA0DnBR,MAAQ,WACN,IAAQd,EAAO,EAAKuB,MAAZvB,GAEHA,GAAMA,EAAGwB,aAAevB,UAAUwB,QACrC,EAAK3B,WA9DU,EAkEnBa,iBAAmB,SAACvD,GAClB,MAA2C,EAAKmE,MAAxCnC,EAAR,EAAQA,UAAWsC,EAAnB,EAAmBA,oBACnBtE,EAAKuE,SAAQ,YAAoB,IAAjBnC,EAAgB,EAAhBA,KAAM/B,EAAU,EAAVA,IAEdmE,EAAeC,YAAYzC,EAAW,CAAEI,KAAMA,IAEhDoC,GAAgB,EAClBxC,EAAUwC,GAAc5D,QAAU,IAAID,KAEtCqB,EAAU0C,KAAK,CAAEtC,KAAMA,EAAM/B,IAAKA,EAAKO,QAAS,IAAID,OAEtD,IAAMgE,EAAyBF,YAAYH,EAAqBlC,GAE5DuC,GAA0B,GAExBL,EAAoBK,GAAwBvC,GAAMwC,OAAS,GAC7DN,EAAoBK,GAAwBvC,GAAMyC,MAEpDP,EAAoBK,GAAwBvC,GAAM0C,QAAQ,CAAEzE,IAAKA,EAAKO,QAAS,IAAID,QAEnF2D,EAAoBI,KAApB,eAA4BtC,EAAO,CAAC,CAAE/B,IAAKA,EAAKO,QAAS,IAAID,YAIjE,EAAKqC,SAAS,CACZhB,UAAWA,EACXsC,oBAAqBA,KA5FN,EAgGnBnC,aAAe,SAACC,GACd,IAAQkC,EAAwB,EAAKH,MAA7BG,oBACFK,EAAyBF,YAAYH,EAAqBlC,GAC5DuC,GAA0B,GAE5B,EAAK3B,SAAS,CACZ3B,aAAce,EACdjC,iBAAkBmE,EAAoBK,GAAwBvC,MAvGjD,EA4GnBjB,cAAgB,WACd,EAAK6B,SAAS,CACZ3B,aAAc,KACdlB,iBAAkB,QA7GpB,EAAKgE,MAAQ,CACXvB,GAAI,KACJZ,UAAW,GACXX,aAAc,KACdiD,oBAAqB,GACrBnE,iBAAkB,MAPH,E,0CAmHnB,WACE,MAAsD4E,KAAKZ,MAAnDnC,EAAR,EAAQA,UAAWX,EAAnB,EAAmBA,aAAclB,EAAjC,EAAiCA,iBAEjC,OAAQ,sBAAKiB,UAAU,MAAM4D,GAAG,UAAxB,UACN,wDACChD,EAAU4C,OAAS,EAAI,cAAC,EAAD,CAAQ5C,UAAWA,EAAWX,aAAcA,EAAclB,iBAAkBA,EAClGgC,aAAc4C,KAAK5C,aAAchB,cAAe4D,KAAK5D,gBAClD,qBAAKC,UAAU,SAAf,SACD,2D,GA7HQ6D,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2a94f58d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\n \r\nconst City = (props) => {\r\n \r\n    const [data, setData] = useState({});\r\n \r\n    useEffect(() => {\r\n        props.selectedCityData.map((data) => {\r\n            data.aqi = parseInt(data.aqi.toFixed(0),10);\r\n        })\r\n        const lineGraphData = {\r\n            labels: props.selectedCityData.map(d => new Date(d.updated).toLocaleString()),\r\n            datasets: [\r\n                {\r\n                    data: props.selectedCityData.map(d => d.aqi),\r\n                    label: `AQI`,\r\n                    borderColor: \"#3e95cd\",\r\n                    fill: false,\r\n                }\r\n            ]\r\n        }\r\n        setData(lineGraphData);\r\n    }, [props])\r\n \r\n    return (<div>\r\n        <button onClick={props.clearCityData} className=\"btn\">Clear Selected City : {props.selectedCity}</button>\r\n        <div style={{ fontSize: '2em' }}>Latest 10 Record(s)</div>\r\n        <div style={{ height: \"400px\", width: \"90vw\", margin: \"0 auto\" }}>\r\n            <Line data={data} />\r\n        </div>\r\n \r\n    </div>)\r\n}\r\n \r\nexport default City;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport City from './city';\r\n \r\nconst Cities = (props) => {\r\n \r\n    //using this to categorize data to respective class...\r\n    const getCategorisedData = aqi => {\r\n        let className = 'unknown';\r\n        let impact = 'unknown';\r\n \r\n        if (aqi === '') {\r\n            impact = 'Unknown(No Results Found)';\r\n            className = 'Unknown';\r\n        } else if (aqi >= 0 && aqi <= 50) {\r\n            impact = 'Good';\r\n            className = 'good';\r\n        } else if (aqi > 50 && aqi <= 100) {\r\n            impact = 'Moderate';\r\n            className = 'moderate';\r\n        } else if (aqi > 100 && aqi <= 150) {\r\n            impact = 'Unhealthy for Sensitive Groups';\r\n            className = 'unhealthy-sentitive';\r\n        } else if (aqi > 150 && aqi <= 200) {\r\n            impact = 'Unhealthy';\r\n            className = 'unhealthy';\r\n        } else if (aqi > 200 && aqi <= 300) {\r\n            impact = 'Very Unhealthy';\r\n            className = 'very-unhealthy';\r\n        } else if (aqi > 300) {\r\n            impact = 'Hazardous';\r\n            className = 'hazardous';\r\n        }\r\n \r\n        let catagorized = {};\r\n        catagorized['impact'] = impact;\r\n        catagorized['className'] = className;\r\n \r\n        return catagorized;\r\n    };\r\n \r\n    return (<React.Fragment>\r\n        <div style={{ fontSize: '2em' }}>Click on any city to get that city latest 10 Record(s) on chart</div>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th className=\"city\">City</th>\r\n                    <th className=\"aqi_index aqiImpact\">Current AQI (Status)</th>\r\n                    <th>Last Updated</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.citiesAqi.map((cityAqi, index) => (\r\n                    <tr key={index} className={getCategorisedData(cityAqi.aqi).className} onClick={() => props.showCityData(cityAqi.city)}>\r\n                        <td className=\"city\">{cityAqi.city}</td>\r\n                        <td className=\"aqi_index aqiImpact\">{cityAqi.aqi.toFixed(2)} ({(getCategorisedData(cityAqi.aqi).impact)})</td>\r\n                        <td>{moment(cityAqi.updated).fromNow()}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n            <tfoot>\r\n                <tr>\r\n                    <td colSpan={3} className={\"aqi_index aqiImpact \"}>Colors Indicator Below</td>\r\n                </tr>\r\n                <tr>\r\n                    <td colSpan={3} className={\"aqi_index aqiImpact \" + getCategorisedData(50).className}>AQI between 0 to 50 : Good</td>\r\n                </tr>\r\n                <tr>\r\n                    <td colSpan={3} className={\"aqi_index aqiImpact \" + getCategorisedData(100).className}>AQI between 50+ to 100 : Moderate</td>\r\n                </tr>\r\n                <tr>\r\n                    <td colSpan={3} className={\"aqi_index aqiImpact \" + getCategorisedData(150).className}>AQI between 100+ to 150 : Unhealthy for Sensitive Groups</td>\r\n                </tr>\r\n                <tr>\r\n                    <td colSpan={3} className={\"aqi_index aqiImpact \" + getCategorisedData(200).className}>AQI between 150+ to 200 : Unhealthy</td>\r\n                </tr>\r\n                <tr>\r\n                    <td colSpan={3} className={\"aqi_index aqiImpact \" + getCategorisedData(300).className}>AQI between 200+ to 300 : Very Unhealthy</td>\r\n                </tr>\r\n                <tr>\r\n                    <td colSpan={3} className={\"aqi_index aqiImpact \" + getCategorisedData(350).className}>AQI greater than 300 : Hazardous</td>\r\n                </tr>\r\n                <tr>\r\n                    <td colSpan={3} className={\"aqi_index aqiImpact \" + getCategorisedData('').className}>AQI data not available : Unknown</td>\r\n                </tr>\r\n            </tfoot>\r\n        </table>\r\n        {props.selectedCity ? <City selectedCityData={props.selectedCityData} clearCityData={props.clearCityData}\r\n            selectedCity={props.selectedCity} /> : null}\r\n    </React.Fragment>)\r\n}\r\n \r\nexport default Cities;\r\n","import React, { Component } from 'react';\nimport * as _ from 'lodash';\nimport Cities from './components/cities';\nimport './App.css';\n \nclass App extends Component {\n \n  constructor(props) {\n    super(props);\n    this.state = {\n      ws: null,\n      citiesAqi: [],\n      selectedCity: null,\n      historicalCitiesAqi: [],\n      selectedCityData: null\n    };\n  }\n \n  // single websocket instance for the own application and constantly trying to reconnect.\n  componentDidMount = () => {\n    this.connect();\n  }\n \n  /**\n     * @function connect\n     * This function establishes the connect with the websocket and also ensures constant reconnection if connection closes\n     */\n  connect = () => {\n    let ws = new WebSocket(\"wss://city-ws.herokuapp.com/\");\n    let that = this;// cache the this\n    let connectInterval;\n \n    // websocket onopen event listener\n    ws.onopen = () => {\n      // console.log(\"connected websocket in app component\");\n      this.setState({ ws: ws });\n      that.timeout = 250; // reset timer to 250 on open of websocket connection \n      clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n    }\n \n    // websocket onmessage event listener\n    ws.onmessage = (evt) => {\n      // listen to data sent from the websocket server\n      const data = JSON.parse(evt.data);\n      // console.log(data);\n      this.handleDataChange(data);\n    }\n \n    // websocket onclose event listener\n    ws.onclose = (evt) => {\n      // console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, evt.reason);\n      that.timeout = that.timeout + that.timeout;//increment retry interval\n      connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n    }\n \n    // websocket onerror event listener\n    ws.onerror = (err) => {\n      console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n      ws.close();\n    }\n  }\n \n  /**\n   * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n   */\n  check = () => {\n    const { ws } = this.state;\n    //check if websocket instance is closed, if so call `connect` function.\n    if (!ws || ws.readyState === WebSocket.CLOSED) {\n      this.connect();\n    }\n  }\n \n  handleDataChange = (data) => {\n    const { citiesAqi, historicalCitiesAqi } = this.state;\n    data.forEach(({ city, aqi }) => {\n      // console.log(`The AQI of ${city} is ${aqi}`);\n      const currentIndex = _.findIndex(citiesAqi, { city: city });\n      // console.log(\"currentIndex : \" + currentIndex);\n      if (currentIndex > -1) {\n        citiesAqi[currentIndex].updated = new Date();\n      } else {\n        citiesAqi.push({ city: city, aqi: aqi, updated: new Date() });\n      }\n      const historicalCurrentIndex = _.findIndex(historicalCitiesAqi, city);\n      // console.log(\"historicalCurrentIndex : \" + historicalCurrentIndex);\n      if (historicalCurrentIndex > -1) {\n        // console.log(historicalCitiesAqi[historicalCurrentIndex][city]);\n        if (historicalCitiesAqi[historicalCurrentIndex][city].length > 9) {\n          historicalCitiesAqi[historicalCurrentIndex][city].pop();\n        }\n        historicalCitiesAqi[historicalCurrentIndex][city].unshift({ aqi: aqi, updated: new Date() });\n      } else {\n        historicalCitiesAqi.push({ [city]: [{ aqi: aqi, updated: new Date() }] });\n      }\n    });\n \n    this.setState({\n      citiesAqi: citiesAqi,\n      historicalCitiesAqi: historicalCitiesAqi\n    })\n  }\n \n  showCityData = (city) => {\n    const { historicalCitiesAqi } = this.state;\n    const historicalCurrentIndex = _.findIndex(historicalCitiesAqi, city);\n    if (historicalCurrentIndex > -1) {\n      // console.log(historicalCitiesAqi[historicalCurrentIndex][city]);\n      this.setState({\n        selectedCity: city,\n        selectedCityData: historicalCitiesAqi[historicalCurrentIndex][city]\n      })\n    }\n  }\n \n  clearCityData = () => {\n    this.setState({\n      selectedCity: null,\n      selectedCityData: null\n    })\n  }\n \n  render() {\n    const { citiesAqi, selectedCity, selectedCityData } = this.state;\n \n    return (<div className=\"App\" id=\"content\">\n      <h1>Air Quality Monitoring</h1>\n      {citiesAqi.length > 0 ? <Cities citiesAqi={citiesAqi} selectedCity={selectedCity} selectedCityData={selectedCityData}\n        showCityData={this.showCityData} clearCityData={this.clearCityData} />\n        : (<div className=\"header\">\n          <h1> No Result Found</h1>\n        </div>)}\n    </div>);\n  }\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}